
/* program theater */

int total_customer = 300, total_box_agent = 2, total_concession_worker = 1, total_ticket_taker = 1;


semaphore box_agent = total_box_agent, concession_worker = total_concession_worker, ticket_taker = total_ticket_taker;
semaphore give_ticket = 0, hand_over_ticket = 0, order_filled = 0, ticket_torn = 0, order_ready = 0, ticket_payment = 0;
semaphore mutex0 = 1, mutex1 = 1, mutex2 = 1, mutex3 = 1, mutex4 = 1;
int time_tear_ticket = 15, time_conc_order = 180, time_sell_ticket = 90;
bool ticket[total_customer] = {false} //each bool refers to a customer's ticket status, false = no ticket, true = received ticket
int movie[total_customer] = {0} //each int refers to a customer's movie choice
string c_order[total_customer] = {""} //each int refers to a customer's order at the concession stand, empty string = no order ()

int cust_count = 0, agent_count = 0;

void main(){
	count = 0;
	read_in_file()

	for i=0 to total_customer-1{
		create thread_customer()[i];
	}

	for 1 to total_box_agent{
		create thread_box_agent();
	}

	for 1 to total_concession_worker{
		create thread_concession_worker();
	}

	for 1 to total_ticket_taker{
		create thread_ticket_taker();
	}

	for i=0 to total_customer-1{
		thread_customer[1].join();
	}
}

void thread_customer(){
	int custnr;
	wait(mutex1);      -297 [cust3, 4, 5, ....]
		cust_count++;
		custnr=cust_count;
		signal(mutex1);
	announce_customer_created();

	pick_movie();

	wait(box_agent);  
		wait(mutex2);
			enqueue_agent(custnr);
			signal(ticket_payment);
			signal(mutex2);
		wait(give_ticket);
	signal(box_agent);
		
	if ticket[custnr] == true {
		ticket_recieved();
		get_in_t_line();
		wait(ticket_taker);
			wait(mutex3);
				enqueue_taker(custnr);
				give_to_taker();
				signal(hand_over_ticket);
				signal(mutex3);
			wait(ticket_torn);

		signal(ticket_taker);
		
		if rand > 50%{
			c_order[custnr] = pick_concession();
			get_in_c_line();
			wait(concession_worker);
				wait(mutex4);
					enqueue_conc(custnr);
					placing_order();
					signal(order_ready);
					signal(mutex4);
				wait(order_filled);
				receive_order();
			signal(concession_worker);
		}

		enter_movie();
	}
	else
		leave_theater();
}

void thread_box_agent(){
	
	int agentnr;
	int b_cust;

	wait(mutex0);
		agent_count++;
		agentnr = agent_count;
		signal(mutex0);

	announce_agent_created();
	while(true){
		wait(ticket_payment);
			wait(mutex2);
				dequeue_agent(b_cust);
				if movie[b_cust] is available
					ticket[b_cust] = true;
				signal(mutex2);
			delay(time_sell_ticket);
			signal(give_ticket);
	}
}

void thread_ticket_taker(){
	
	int t_cust;	
	announce_taker_created();
	while(true){
		
		wait(hand_over_ticket);
			wait(mutex3);
				dequeue_taker(t_cust);
				signal(mutex3);
			delay(time_tear_ticket);
			ticket_taken();
			signal(ticket_torn);
	}
}

void thead_concession_worker(){
	
	int c_cust;
	announce_conc_created();
	while(true){

		wait(order_ready);
			wait(mutex4);
				dequeue_conc(c_cust);
				signal(mutex4);
			order_taken();
			delay(time_conc_order);
			give_order();
			signal(order_filled);
	}
}
